// Name: Hritik Panchasara
// netID: hhp160130
// Description: This class uses a special API key to call data from the OpenWeatherMap.org database. A Json parser function converts the data into a readable format.

import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;

public class WeatherAPI {
	
	private static final String key = "17978d4a69264ded286a0e50ea5875a4";	// An API key generated by the OpenWeatherMap.org
    private static final String endpoint = "http://api.openweathermap.org/data/2.5/weather?q=%s&APPID=%s";	// Calling API documentation with city names.


    // This method connects to the API and requests data
    public static FormattingData get_weather(String location) {
        try {
            // Make a GET request to the API.
            URL url = new URL(String.format(endpoint, location, key));
            HttpURLConnection http = (HttpURLConnection) url.openConnection();
            http.setRequestMethod("GET");

            // Data returned from API is read. 
            BufferedReader reader = new BufferedReader(new InputStreamReader(http.getInputStream()));
            StringBuilder result = new StringBuilder();

            String line;
            while ((line = reader.readLine()) != null) {
                result.append(line);
            }
            reader.close();

            // Returning the parsed data.
            return parsingJSON(result.toString());

        } catch (Exception e) {
            System.out.println("Failed to fetch weather data");
        }
        // Return null if failure
        return null;
    }

    // This method parses the JSON data returned by the API.
    private static FormattingData parsingJSON(String json) {
        // Parse entire JSON string and convert to object
        JsonObject obj = new JsonParser().parse(json).getAsJsonObject();

        // Get the object under the "main" key.
        JsonObject obj_main = obj.getAsJsonObject("main");

        // Get the temperatures from "main" object.
        double temp = obj_main.get("temp").getAsDouble();
        double tempF = temp - 273.15;
        double high = obj_main.get("temp_max").getAsDouble();
        double highF = high - 273.15;
        double low = obj_main.get("temp_min").getAsDouble();
        double lowF = low - 273.15;

        // Get weather from the main object of first element of "weather" array in the "main" object.
        String weather = obj.getAsJsonArray("weather").get(0).getAsJsonObject().get("main").getAsString();

        // Get the location name from the root object.
        String location = obj.get("name").getAsString();

        // Return fetched data as a WeatherData object.
        return new FormattingData(tempF, highF, lowF, weather, location);
    }   
}
